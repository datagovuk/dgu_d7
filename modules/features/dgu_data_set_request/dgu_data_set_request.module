<?php
/**
 * @file
 * Code for the DGU Data set request feature.
 */


define('DATA_REQUEST_MODERATION_PERMISSION', 'edit any dataset_request content');
define('PUBLIC_DATA_REQUEST_GRANT', 2147483647);    // maximum possible value (avialable in Solr) to avoid conflict with $node->uid
define('DATA_REQUEST_MODERATOR_GRANT', 2147483646); // maximum possible value (avialable in Solr) -1 to avoid conflict with $node->uid

include_once 'dgu_data_set_request.features.inc';


function dgu_data_set_request_dgu_moderation_moderator_permission(&$node) {
  if ($node->type == 'dataset_request') {
    return user_access(DATA_REQUEST_MODERATION_PERMISSION);
  }
}

/**
 * @param $form
 * @param $form_state
 * @param $form_id
 *
 *
 * Implements Hook hook_form_FORM_ID_alter which:
 * -  creates our own hidden input for review status and hides the select
 * box for any user who does not have the "Dataset Request: Edit any content" permission.
 * - adds a button to submit the data request for moderation.
 */
function dgu_data_set_request_form_dataset_request_node_form_alter(&$form, &$form_state, $form_id) {

  drupal_set_title('Create a dataset request');
  unset($form['actions']['preview']);
  $form['#attributes']['class'][] = "boxed";

  dgu_moderation_node_forms_alter($form, DATA_REQUEST_MODERATION_PERMISSION);

  if (!user_access(DATA_REQUEST_MODERATION_PERMISSION)){
    $form['field_review_status'] = array(
        '#type' => 'hidden',
        '#title' => t('Review status'),
        '#value' => 0,
    );
    $form['field_review_notes'] = array(
        '#type' => 'hidden',
        '#title' => t('Review Notes'),
        '#value' => 0,
    );
  }
}

function dgu_data_set_request_node_access($node, $op, $account) {
  if ($op != 'create' && $node->type == 'dataset_request') {
    if(!($node->uid == $account->uid || user_access(DATA_REQUEST_MODERATION_PERMISSION))) {
      if(isset($node->field_publication_preference[LANGUAGE_NONE][0]['value']) && $node->field_publication_preference[LANGUAGE_NONE][0]['value'] == 0) {
        return NODE_ACCESS_DENY;
      }
    }
  }
}

function dgu_data_set_request_node_access_records($node) {
  if ($node->type == 'dataset_request') {
    $grants = array();
    if (isset($node->field_publication_preference[LANGUAGE_NONE][0]['value']) && $node->field_publication_preference[LANGUAGE_NONE][0]['value'] == 0) {
      // Private request
      $grants[] = array(
        'realm' => 'private_data_request',
        'gid' => DATA_REQUEST_MODERATOR_GRANT,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
      );
      $grants[] = array(
        'realm' => 'private_data_request',
        'gid' => $node->uid,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
        );
    }
    else {
      // Public request
      $grants[] = array(
        'realm' => 'public_data_request',
        'gid' => DATA_REQUEST_MODERATOR_GRANT,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
      );
      $grants[] = array(
        'realm' => 'public_data_request',
        'gid' => $node->uid,
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
      );
      if ($node->status == 1) {
        $grants[] = array(
          'realm' => 'public_data_request',
          'gid' => PUBLIC_DATA_REQUEST_GRANT,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
        );
      }
    }
    return $grants;
  }
}

function dgu_data_set_request_node_grants($account, $op) {
  $grants = array();
  $grants['private_data_request'] = array($account->uid);
  $grants['public_data_request'] = array($account->uid, PUBLIC_DATA_REQUEST_GRANT);
  if (user_access(DATA_REQUEST_MODERATION_PERMISSION, $account)) {
    $grants['private_data_request'] = array(DATA_REQUEST_MODERATOR_GRANT);
    $grants['public_data_request'] = array(DATA_REQUEST_MODERATOR_GRANT);
  }
  return $grants;
}
