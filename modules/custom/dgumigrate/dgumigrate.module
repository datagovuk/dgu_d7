<?php

abstract class DGUMigration extends DynamicMigration {
  public function __construct() {
    parent::__construct();
  }
}

class DGUGlossaryMigration extends DrupalTerm6Migration {
    public function __construct(array $arguments) {
        parent::__construct($arguments);
        $this->description = t('Glossary Term migration/import');
        $this->source = new MigrateSourceCSV(DRUPAL_ROOT . '/' . drupal_get_path('module', 'dgumigrate') . '/data/glossary_terms.csv', array(), array('header_rows' => 1));
        $this->destination = new MigrateDestinationTerm($this->destinationVocabulary);
        $this->map = new MigrateSQLMap($this->machineName,
            array(
                'tid' => array('type' => 'int',
                    'unsigned' => TRUE,
                    'not null' => TRUE,
                    'description' => 'Source term ID',
                ),
            ),
            MigrateDestinationTerm::getKeySchema()
        );

        // Mappings are straight-forward
        $this->addFieldMapping('name', 'Term');
        $this->addFieldMapping('description', 'Definition');
    }

    public function prepareKey($source_key, $row) {
        $row->tid = $row->csvrownum;
        return parent::prepareKey($source_key, $row);
    }

    public function prepareRow($row) {
        $row->tid = $row->csvrownum;
        return TRUE;
    }
}




class DGUUserMigration extends DrupalUser6Migration {
  public function __construct(array $arguments) {
      parent::__construct($arguments);
      $this->addFieldMapping('is_new', NULL, FALSE)->defaultValue(TRUE);
      $this->addFieldMapping('uid', 'uid');
      $this->addFieldMapping('field_avatar', 'field_avatar')->sourceMigration('Files');
      $this->addFieldMapping('field_avatar:file_class')->defaultValue('MigrateFileFid');
      $this->addFieldMapping('field_avatar:source_dir')->defaultValue(variable_get("drupal6files"));
      $this->addFieldMapping('picture:file_class')->defaultValue('MigrateFileFid');
      $this->addFieldMapping('picture:source_dir')->defaultValue(variable_get("drupal6files"));
      $this->addFieldMapping('field_first_name', 'field_fname');
      $this->addFieldMapping('field_surname', 'field_sname');
      $this->addFieldMapping('field_bio', 'field_bio');
      $this->addFieldMapping('field_twitter', 'field_twitter');
      $this->addFieldMapping('field_facebook_url', 'field_facebook');
      $this->addFieldMapping('field_linkedin_url', 'field_linkedin');
      $this->addFieldMapping('field_job_title', 'field_job_title');

      $this->addUnmigratedDestinations(array("field_publishers", "field_avatar:language"));
  }

  function query() {
      $query = Database::getConnection('default', $this->sourceConnection)
          ->select('users', 'u')
          ->fields('u')
          ->condition('u.uid', 1, '>');
      $query->leftJoin('node', 'n', 'n.uid = u.uid');
      $query->condition('n.type', 'profile');
      $query->leftJoin('content_type_profile', 'p', 'p.nid = n.nid');
      $query->fields('p');
      return $query;
  }

    public function prepareRow($row) {
        return parent::prepareRow($row);
    }
}

function dgumigrate_migrate_api() {
  $api = array(
      'api' => 2,
  );
  return $api;
}

/**
 * Implements hook_flush_caches().
 */
function dgumigrate_flush_caches() {
  db_truncate('migrate_status')->execute();
  dgumigrate_register_migrations();
}

function dgumigrate_register_migrations() {

  $common_arguments = array(
      'source_connection' => 'd6source',
      'source_version' => 6,
      'format_mappings' => array(
          0 => 'plain_text',
          1 => 'filtered_html',
          2 => 'full_html',
          3 => 'plain_text',
          4 => 'full_html',
          5 => 'full_html',
          6 => 'filtered_html',
          7 => 'full_html'
      )
  );
  $arguments = $common_arguments + array(
      'description' => t('Migration of users from Drupal 6'),
      'machine_name' => 'user',
      'group' => 'User',
  );

  //Register User migration using the base class
  Migration::registerMigration('DGUUserMigration', $arguments['machine_name'], $arguments);

  //Define all taxonomy vocabularies to be migrated.
  $vocabulary_arguments = array(
      array(
          'description' => t('Migration of Category terms from Drupal 6'),
          'machine_name' => 'category',
          'source_vocabulary' => '4',
          'destination_vocabulary' => 'category',
      ),
      array(
          'description' => t('Migration of Sector terms from Drupal 6'),
          'machine_name' => 'sector',
          'source_vocabulary' => '13',
          'destination_vocabulary' => 'sector',
      ),
      array(
          'description' => t('Migration of Document type terms from Drupal 6'),
          'machine_name' => 'document_type',
          'source_vocabulary' => '21',
          'destination_vocabulary' => 'document_type',
      ),
      array(
          'description' => t('Migration of Nation terms from Drupal 6'),
          'machine_name' => 'nation',
          'source_vocabulary' => '8',
          'destination_vocabulary' => 'nation',
      ),
      array(
          'description' => t('Migration of Tags terms from Drupal 6'),
          'machine_name' => 'tags',
          'source_vocabulary' => '6',
          'destination_vocabulary' => 'tags',
      ),
      array(
          'description' => t('Migration of Forums from Drupal 6'),
          'machine_name' => 'forum',
          'source_vocabulary' => '2',
          'destination_vocabulary' => 'forums',
      ),
  );

  $common_vocabulary_arguments = $common_arguments + array(
      'class_name' => 'DrupalTerm6Migration',
      'soft_dependencies' => array('user'),
      'group' => 'Taxonomy'
  );

  foreach ($vocabulary_arguments as $arguments) {
    $arguments += $common_vocabulary_arguments;
    Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);
  }

  $node_arguments = array(
      array(
          'class_name' => 'DGUBlogMigration',
          'description' => t('Migration of blog nodes from Drupal 6'),
          'machine_name' => 'blog_entry',
          'source_type' => 'blog',
          'destination_type' => 'blog',
      ),
      array(
          'class_name' => 'DGUBookMigration',
          'description' => t('Migration of book nodes from Drupal 6'),
          'machine_name' => 'book',
          'source_type' => 'book',
          'destination_type' => 'book',
      //'ignore_comments' => TRUE,
      ),
      array(
          'class_name' => 'DGUDataRequestMigration',
          'description' => t('Migration of Data request nodes from Drupal 6'),
          'machine_name' => 'data_request',
          'source_type' => 'data_request',
          'destination_type' => 'dataset_request',
      ),
      array(
          'class_name' => 'DGUForumMigration',
          'description' => t('Migration of Forum nodes from Drupal 6'),
          'machine_name' => 'forum_topic',
          'source_type' => 'forum',
          'destination_type' => 'forum',
      ),
      array(
          'class_name' => 'DGUIdeaMigration',
          'description' => t('Migration of Ideas nodes from Drupal 6'),
          'machine_name' => 'idea',
          'source_type' => 'ideas',
          'destination_type' => 'idea',
      ),
      array(
          'class_name' => 'DGUOrganogramMigration',
          'description' => t('Migration of Organogram nodes from Drupal 6'),
          'machine_name' => 'organogram',
          'source_type' => 'organogram',
          'destination_type' => 'organogram',
          'ignore_comments' => TRUE,
      ),
      array(
          'class_name' => 'DGUResourceMigration',
          'description' => t('Migration of Library Resources nodes from Drupal 6'),
          'machine_name' => 'resource',
          'source_type' => 'resource',
          'destination_type' => 'resource',
          'ignore_comments' => TRUE,
      ),
      array(
          'class_name' => 'DGUPageMigration',
          'description' => t('Migration of Page nodes from Drupal 6'),
          'machine_name' => 'page',
          'source_type' => 'page',
          'destination_type' => 'page',
          'ignore_comments' => TRUE,
      ),
      array(
          'class_name' => 'DGUStoryMigration',
          'description' => t('Migration of Story nodes from Drupal 6 to pages in Drupal 7'),
          'machine_name' => 'story',
          'source_type' => 'story',
          'destination_type' => 'page',
          'ignore_comments' => TRUE,
      ),
      array(
          'class_name' => 'DGUPromoMigration',
          'description' => t('Migration of promo nodes from Drupal 6 to Drupal 7'),
          'machine_name' => 'promo',
          'source_type' => 'promo',
          'destination_type' => 'promo_item',
          'ignore_comments' => TRUE,
      ),
  );
  $common_node_arguments = $common_arguments + array(
      'user_migration' => 'user',
      'format_mappings' => array(1 => "filtered_html", 2 => "filtered_html"),
      'group' => 'Nodes',
  );

  foreach ($node_arguments as $arguments) {
    $arguments = array_merge_recursive($arguments, $common_node_arguments);
    Migration::registerMigration($arguments['class_name'], $arguments['machine_name'], $arguments);
  }

  unset($common_node_arguments['group']);
  Migration::registerMigration('DGUAppMigration', 'app',
    array_merge_recursive($common_node_arguments, array(
        'class_name' => 'DGUAppMigration',
        'description' => t('Migration of app nodes from Drupal 6'),
        'machine_name' => 'app',
        'source_type' => 'Apps',
        'destination_type' => 'app',
        'group' => 'Apps',
      )
    )
  );
  $file_arguments = $common_arguments + array(
      'description' => t('Migration of files from Drupal 6'),
      'machine_name' => 'files',
      'source_dir' => variable_get("drupal6files"),
      'group' => 'Files',
  );
  Migration::registerMigration('DGUFileMigration', $file_arguments['machine_name'], $file_arguments);


  $comment_arguments = $common_arguments + array(
      'user_migration' => 'user',
      'destination_field' => 'field_comment',
      'group' => 'Comments',
  );
  foreach ($node_arguments as $node_argument) {
    $arguments = array_merge($comment_arguments, array(
        'description' => t('Migration of comments on ' . $node_argument['source_type'] . ' nodes from Drupal 6'),
        'node_migration' => $node_argument['machine_name'],
        'source_type' => $node_argument['source_type'],
        'destination_type' => $node_argument['destination_type']));

    if (!array_key_exists('ignore_comments', $node_argument) || !$node_argument['ignore_comments']) {
      if ($node_argument['machine_name'] == 'book') {
        $arguments['reply_bundle'] = 'field_comment';
        $arguments['destination_field'] = 'field_field_comments';
        Migration::registerMigration('DGUBookCommentMigration', 'book_comments', $arguments);
      } else {
        Migration::registerMigration('DGUCommentMigration', $node_argument['machine_name'] . '_comments', $arguments);
      }
    }
  }
  $ckan_dataset_arguments = $comment_arguments + array(
    'source_type' => 'ckan_package',
    'user_migration' => 'user',
    'group' => 'Datasets',
  );
  Migration::registerMigration('CKANDatsetMigration', 'ckan_dataset', $ckan_dataset_arguments);

  $arguments = array_merge($comment_arguments, array(
      'description' => t('Migration of comments on ckan dataset nodes from Drupal 6'),
      'node_migration' => 'ckan_dataset',
      'source_type' => 'ckan_package',
      'entity_key' => 'id',
      'entity_type' => 'ckan_dataset',
      'group' => 'Comments',
      'destination_type' => 'ckan_dataset'));
  Migration::registerMigration('DGUCommentMigration', 'ckan_dataset_comments', $arguments);


  $menu_arguments = $common_arguments + array(
      'description' => t('Migration of menus from Drupal 6'),
      'machine_name' => 'menu',
  );

  Migration::registerMigration('DrupalMenu6Migration', $menu_arguments['machine_name'], $menu_arguments);

  Migration::registerMigration('MigrateVotes', 'Votes', array_merge($comment_arguments, array('source_type' => 'apps', 'content_source' => 'app', 'user_migration' => 'user', 'description' => 'Migrate Votes')));
  Migration::registerMigration('MigratePathRedirect', 'Paths', array_merge($comment_arguments, array(
    'content_tables' => array(
        'page' => array('table' => 'migrate_map_page', 'url' => 'node'),
        'apps' => array('table' => 'migrate_map_app', 'url' => 'node'),
        'book' => array('table'=> 'migrate_map_book', 'url' => 'node'),
        'resource' => array('table'=> 'migrate_map_resource', 'url' => 'node'),
        'organogram' => array('table'=> 'migrate_map_organogram', 'url' => 'node'),
        'blog' => array('table' => 'migrate_map_blog_entry', 'url' => 'node'),
        'ckan_package' => array('table' => 'migrate_map_ckan_dataset', 'url' => 'ckan_dataset'),
        'story' => array('table' => 'migrate_map_story', 'url' => 'page'),
    ),
    'description' => 'Migrate Path redirects')
  ));

  $menu_links_arguments = $common_arguments + array(
      'description' => t('Migration of menu links from Drupal 6'),
      'machine_name' => 'menu_links',
      'menu_migration' => $menu_arguments['machine_name'],
      'group' => 'Paths'
  );
  Migration::registerMigration('DrupalMenuLinks6Migration', $menu_links_arguments['machine_name'], $menu_links_arguments);


  $glossary_args = $common_arguments + array(
        'class_name' => 'DGUGlossaryMigration',
        'description' => t('Migration of Glossary terms from csv'),
        'machine_name' => 'glossary',
        'destination_vocabulary' => 'glossary',
        'source_vocabulary' => 'none',
        'group' => 'Taxonomy',
  );
  Migration::registerMigration('DGUGlossaryMigration', 'Glossary', $glossary_args);

}
