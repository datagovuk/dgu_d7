<?php

/**
 * @file
 * CKAN Package Entity
 */  


/**
 * Implement hook_entity_info().
 *
 * 
 */
function ckan_package_entity_info() {
  $return['ckan_package'] = array(
    'label' => t('CKAN Package'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'CKAN',
    'controller class' => 'CKANController',
    'base table' => 'ckan_package',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'ckan_id',
        'bundle' => 'type',
    ),
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'ckan_package_create',
    'access callback' => 'ckan_package_access',
    'module' => 'ckan_package',
    // The information below is used by the CKANUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'admin/content/ckan_packages',
      'file' => 'ckan_package.admin.inc',
      'controller class' => 'CKANUIController',
      'menu wildcard' => '%ckan_package',
    ),
  );
  // The entity that holds information about the entity types	  
  $return['ckan_package_type'] = array(
    'label' => t('CKAN Package Type'),
    'entity class' => 'CKANType',
    'controller class' => 'CKANTypeController',
    'base table' => 'ckan_package_type',
    'fieldable' => FALSE,
    'bundle of' => 'ckan_package',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'ckan_package_type_access',
    'module' => 'ckan_package',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/ckan_package_type',
      'file' => 'ckan_package_type.admin.inc',
      'controller class' => 'CKANTypeUIController',
    ),
  );

  return $return;
}


/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the ckan_package types via a hook to avoid a recursion
 * issue as loading the ckan package types requires the entity info as well.
 *
 */
function ckan_package_entity_info_alter(&$entity_info) {
  foreach (ckan_package_get_types() as $type => $info) {
    $entity_info['ckan_package']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/ckan_package_type/manage/%ckan_package_type',
        'real path' => 'admin/structure/ckan_package_type/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer CKAN types'),
      ),
    );
  }
}
  

/**
 * Implements hook_permission().
 */
function ckan_package_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer CKAN types' => array(
      'title' => t('Administer CKAN types'),
      'description' => t('Create and delete fields for CKAN types, and set their permissions.'),
    ),
    'administer CKAN' => array(
      'title' => t('Administer CKAN'),
      'description' => t('Edit and delete all CKAN Packages'),
    ),  
  );
  
  foreach (ckan_package_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name CKAN Package" => array(
        'title' => t('%type_name: Edit any CKAN Package', array('%type_name' => $type->label)),
      ),
      "view any $type_name CKAN Package" => array(
        'title' => t('%type_name: View any CKAN Package', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;  
}


/**
 * Determines whether the given user has access to a CKAN Package.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $ckan_package
 *   Optionally a ckan package or a ckan package type to check access for. If nothing is
 *   given, access for all ckan packages is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function ckan_package_access($op, $ckan_package = NULL, $account = NULL) {
  if (user_access('administer CKAN', $account)) {
    return TRUE;
  }
  if (isset($ckan_package) && $type_name = $ckan_package->type) {
    $op = ($op == 'view') ? 'view' : 'edit';
    if (user_access("$op any $type_name CKAN Package", $account)) {
      return TRUE;
    }
  }
  return FALSE;
}


/**
 * Access callback for the entity API.
 */
function ckan_package_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer CKAN types', $account);
}


/**
 * Gets an array of all CKAN Package types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return CKANType[]
 *   Depending whether $type isset, an array of CKAN Package types or a single one.
 */
function ckan_package_get_types($type_name = NULL) {
  // entity_load will get the Entity controller for our CKAN Pacakge and call the load
  // function of that object - we are loading entities by name here.
  $types = entity_load_multiple_by_name('ckan_package_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}


/**
 * Menu argument loader; Load a CKAN type by string.
 *
 * @param $type
 *   The machine-readable name of a CKAN type to load.
 * @return
 *   A CKAN Package type array or FALSE if $type does not exist.
 */
function ckan_package_type_load($type) {
  return ckan_package_get_types($type);
}


/**
 * Fetch a CKAN Package object. 
 *
 * @param $ckan_id
 *   Integer specifying the ckan id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $ckan object or FALSE if it cannot be loaded.
 *
 * @see ckan_package_load_multiple()
 */
function ckan_package_load($ckan_id, $reset = FALSE) {
  $ckan_packages = ckan_package_load_multiple(array($ckan_id), array(), $reset);
  return reset($ckan_packages);
}


/**
 * Load multiple CKAN packages based on certain conditions.
 *
 * @param $ckan_ids
 *   An array of CKAN IDs.
 * @param $conditions
 *   An array of conditions to match against the {ckan_package} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of CKAN objects, indexed by ckan_id.
 *
 * @see entity_load()
 * @see ckan_package_load()
 */
function ckan_package_load_multiple($ckan_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('ckan_package', $ckan_ids, $conditions, $reset);
}


/**
 * Deletes a CKAN Package.
 */
function ckan_package_delete(CKAN $ckan) {
  $ckan->delete();
}


/**
 * Delete multiple CKAN Packages.
 *
 * @param $ckan_ids
 *   An array of ckan IDs.
 */
function ckan_package_delete_multiple(array $ckan_ids) {
  entity_get_controller('ckan_package')->delete($ckan_ids);
}


/**
 * Create a ckan object.
 */
function ckan_package_create($values = array()) {
  return entity_get_controller('ckan_package')->create($values);
}


/**
 * Saves a CKAN Package to the database.
 *
 * @param $ckan
 *   The CKAN Package object.
 */
function ckan_package_save(CKAN $ckan) {
  return $ckan->save();
}


/**
 * Saves a CKAN Package type to the db.
 */
function ckan_package_type_save(CKANType $type) {
  $type->save();
}


/**
 * Deletes a CKAN Package type from the db.
 */
function ckan_package_type_delete(CKANType $type) {
  $type->delete();
}


/**
 * URI callback for CKAN Package
 */
function ckan_package_uri(CKAN $ckan){
  return array(
    'path' => 'ckan_package/' . $ckan->ckan_id,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function ckan_package_page_title(CKAN $ckan){
  return $ckan->name;
}


/**
 * Sets up content to show an individual CKAN Package
 */
function ckan_package_page_view($ckan, $view_mode = 'full') {    
  $controller = entity_get_controller('ckan_package');  
  $content = $controller->view(array($ckan->ckan_id => $ckan));
  drupal_set_title($ckan->name);
  return $content;
}


/**
 * Implements hook_views_api().
 */
function ckan_package_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ckan_package') . '/views',
    'views_default file' => 'ckan_package.views.inc',
  );
}


/**
 * Implement hook_theme().
 */
function ckan_package_theme() {
  return array(
    'ckan_package_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'ckan_package.admin.inc',
    ),
    'ckan_package' => array(
      'render element' => 'elements',
      'template' => 'ckan_package',
    ),
   'ckan_package_sample_data' => array(
      'variables' => array('ckan_package_sample_data', 'ckan_package' => NULL),
      'template' => 'ckan_package-sample-data',
    ),


  );
}  


/**
 * Implements hook_menu_local_tasks_alter().
 */
function ckan_package_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/structure/ckan_package/add' on 'admin/structure/ckan_package'.
  if ($root_path == 'admin/content/ckan_packages') {
    $item = menu_get_item('admin/content/ckan_packages/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}


/**
 * The class used for CKAN Packages
 */
class CKAN extends Entity {
  
  public function __construct($values = array()) {
    parent::__construct($values, 'ckan_package');
  }

  protected function defaultLabel() {
    return $this->name;
  }

  protected function defaultUri() {
    return array('path' => 'ckan_package/' . $this->ckan_id);
  }
  
  
}


/**
 * The class used for CKAN Package type entities
 */
class CKANType extends Entity {
  
  public $type;
  public $label;
  
  public function __construct($values = array()) {
    parent::__construct($values, 'ckan_package_type');
  }
  
}


/**
 * The Controller for CKAN Packages
 */
class CKANController extends EntityAPIController {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }


  /**
   * Create a CKAN Package - we first set up the values that are specific
   * to our ckan_package schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the ckan package.
   *
   * @return
   *   A ckan package object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our CKAN Package
    $values += array( 
      'ckan_id' => '',
      'is_new' => TRUE,
      'title' => '',
      'created' => '',
      'changed' => '',
      'data' => '',
    );
    
    $ckan = parent::create($values);
    return $ckan;
  }
  
  /*MODULENAME_views_api()  * Overriding the buldContent function to add entity specific fields
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);
    $content['ckan_package_sample_data'] =  array(
      '#markup' => theme('ckan_sample_data', array('ckan_sample_data' => check_plain($entity->data['sample_data']), 'ckan' => $entity)),
    );

    return $content;
  }
  
}


/**
 * The Controller for CKAN Package types
 */
class CKANTypeController extends EntityAPIControllerExportable {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }
  
   /**
   * Create a CKAN Package type
   * 
   * @param $type
   *   The machine-readable type of the CKAN Package type.
   *
   * @return
   *   A CKAN Package type object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our CKAN Package type
    $values += array( 
      'id' => '',
      'is_new' => TRUE,
      'data' => '',
    );
    $ckan_package_type = parent::create($values);
    return $ckan_package_type;
  }

}